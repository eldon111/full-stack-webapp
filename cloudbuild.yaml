steps:
  # Print the branch name
  - id: 'branch-name'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building from branch: $BRANCH_NAME"

  # Install dependencies for all services
  #  - id: 'install-dependencies'
  #    name: 'node:22'
  #    entrypoint: 'bash'
  #    args:
  #      - '-c'
  #      - |
  #        echo "Installing dependencies for all services..."
  #        cd backend && npm ci; cd ..
  #        cd frontend && npm ci; cd ..
  #        cd image-processor && npm ci; cd ..

  # Build backend
  - name: gcr.io/k8s-skaffold/pack
    args:
      - build
      - >-
        ${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:${SHORT_SHA}
      - '--builder=gcr.io/buildpacks/builder:latest'
      - '--network=cloudbuild'
      - '--path=backend'
    id: 'build-backend'
    entrypoint:
      pack

  # Build backend TypeScript
  - id: 'build-backend-typescript'
    name: gcr.io/cloud-builders/npm
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Pushing backend routes lib..."
        cd backend
        npm i
        npm run build

  #  - name: 'gcr.io/cloud-builders/npm'
  #    dir: 'dist/backend/routes'
  #    args: [ 'run', 'artifactregistry-login' ]
  #  - name: 'gcr.io/cloud-builders/npm'
  #    args: [ 'publish', '${_PACKAGE}' ]

  # Build frontend
  - name: gcr.io/k8s-skaffold/pack
    args:
      - build
      - >-
        ${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:${SHORT_SHA}
      - '--builder=gcr.io/buildpacks/builder:latest'
      - '--network=cloudbuild'
      - '--path=frontend'
    id: 'build-frontend'
    entrypoint:
      pack
  #  - id: 'build-frontend'
  #    name: 'node:22'
  #    entrypoint: 'bash'
  #    args:
  #      - '-c'
  #      - |
  #        echo "Building frontend..."
  #        cd frontend
  #        npm run build

  # Build image processor
  - id: 'build-image-processor'
    name: 'node:22'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building image processor..."
        cd image-processor
        npm run build
        # Create a directory for the deployable
        mkdir -p /workspace/deployables/image-processor
        # Copy necessary files for deployment
        cp -r dist package.json package-lock.json /workspace/deployables/image-processor/

  # Create Cloud Function source archive
  - id: 'create-function-archive'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating Cloud Function source archive..."
        cd /workspace/deployables/image-processor
        zip -r function-source.zip .
        # Copy to GCS bucket for Cloud Function deployment
        gsutil cp function-source.zip gs://gcf-sources-${PROJECT_ID}-${_REGION}/${_IMAGE_PROCESSOR_NAME}-source.zip

  # Build and push backend container
  - id: 'build-push-backend'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:latest'
      - './backend'

  # Build and push frontend container
  - id: 'build-push-frontend'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:latest'
      - './frontend'

  # Push backend container
  - id: 'push-backend'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:${SHORT_SHA}'

  # Push frontend container
  - id: 'push-frontend'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:${SHORT_SHA}'

  # Push latest tags
  - id: 'push-latest-tags'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:latest'

  - id: 'push-latest-tags-frontend'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:latest'

# Images to be pushed to the container registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_BACKEND_SERVICE_NAME}:latest'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${_FRONTEND_SERVICE_NAME}:latest'

# Substitution variables
substitutions:
  _REGION: 'us-east4'
  _BACKEND_SERVICE_NAME: 'full-stack-webapp-backend'
  _FRONTEND_SERVICE_NAME: 'full-stack-webapp-frontend'
  _IMAGE_PROCESSOR_NAME: 'generate-thumbnail'

# Timeout for the build (30 minutes)
timeout: '1800s'

# Options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
